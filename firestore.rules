rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate mental metrics data
    function isValidMentalMetric() {
      let data = request.resource.data;
      return data.keys().hasAll(['topics', 'timestamp']) &&
             data.topics is list &&
             data.timestamp is timestamp;
    }

    // Helper function to validate mood entry data
    function isValidMoodEntry() {
      let data = request.resource.data;
      return data.keys().hasAll(['date', 'mood']) &&
             data.mood is string &&
             data.date is timestamp &&
             (!('notes' in data) || data.notes is string);
    }

    // User document rules
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

      // Mental metrics subcollection rules
      match /mental_metrics/{metricId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && isValidMentalMetric();
        allow update: if isOwner(userId) && isValidMentalMetric();
        allow delete: if isOwner(userId);
      }

      // Mood entries subcollection rules
      match /mood_entries/{entryId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && isValidMoodEntry();
        allow update: if isOwner(userId) && isValidMoodEntry();
        allow delete: if isOwner(userId);
      }
    }

    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}